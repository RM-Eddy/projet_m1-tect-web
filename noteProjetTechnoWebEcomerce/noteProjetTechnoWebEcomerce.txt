***** Conception du projet ****
* Nom du Projet : projet_m1-tect-web

* Lien repo git du projet  : 
https://github.com/RM-Eddy/projet_m1-tect-web

* Structure Générale :
projet/
├── .git/
├── .gitignore   ← ICI
├── noteProjetTechnoWebEcomerce/
├── projet_m1-tect-web/
│   └── backend/
│       ├── node_modules/
│       ├── dist/
│       ├── src/
│       ├── package.json
└── README.md

* Structure recommandée : 
projet_m1-tect-web/
├── backend/         
│   ├── .env              ← ✅ ICI
│   ├── src/
│   ├── main.ts
│   ├── app.module.ts
│   └── ...
├── frontend/         
│   └── ...
└── README.md


src/
 └── users/
     ├── dto/
     │   ├── create-user.dto.ts
     │   └── update-user.dto.ts
     ├── user.entity.ts
     ├── users.controller.ts
     ├── users.service.ts
     └── users.module.ts


* Créer le Backend (NestJS) :
** Installer le CLI NestJS :
npm i -g @nestjs/cli

** Créer le projet backend: 
nest new backend

** Se placer dans le dossier
cd backend

* Installer les dépendances  initialement: 

** Si ce n’est pas encore fait :
npm install : est une commande Node.js(qui Installe toutes les dépendances listées dans le fichier package.json de ton projet)

* Installer les dépendances après 

** PostgreSQL + TypeORM
npm install @nestjs/typeorm typeorm pg

*** explications :
🔹@nestjs/typeorm : le module NestJS qui facilite l'intégration de TypeORM
🔹 typeorm : l'ORM utilisé
🔹 pg : le driver PostgreSQL

** Module officiel de configuration :
npm install @nestjs/config : Pour utiliser des variables d’environnement via un fichier " .env " et Il permet à NestJS de charger automatiquement les variables de ton fichier " .env " et Il expose un service ConfigService pour accéder facilement aux variables dans tes modules/services
*** Étapes après l'installation : 
1. Crée un fichier " .env " dans le dossier backend/ : (avec contenu)
DB_HOST=localhost
DB_PORT=5432
DB_USERNAME=postgres
DB_PASSWORD=your_password
DB_NAME=your_database
2. Modifie ton " AppModule.ts " pour utiliser ConfigModule :(contenu==voir le code)

** Librairie officielle de NestJS qui fournit des fonctions utilitaires pour créer facilement des DTO : 
npm install @nestjs/mapped-types : Il fournit des fonctions utilitaires comme PartialType, PickType, OmitType, etc., pour créer facilement des DTO dérivés :

** Swagger
npm install --save @nestjs/swagger swagger-ui-express

** Valider les champs d’un DTO et Transformer un objet brut en instance de classe:
npm install class-validator class-transformer

* Lancer ou Démarrer  le serveur NestJS (de développement ): 
npm run start:dev ou "npm run start" ou "npm start"



























